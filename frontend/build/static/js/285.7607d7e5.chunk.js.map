{"version":3,"file":"static/js/285.7607d7e5.chunk.js","mappings":"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","sources":["../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","../node_modules/framer-motion/dist/es/events/event-info.mjs","../node_modules/framer-motion/dist/es/utils/time-conversion.mjs","../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../node_modules/framer-motion/dist/es/utils/pipe.mjs","../node_modules/framer-motion/dist/es/utils/distance.mjs","../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","../node_modules/framer-motion/dist/es/utils/progress.mjs","../node_modules/framer-motion/dist/es/utils/mix.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","../node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","../node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","../node_modules/framer-motion/dist/es/easing/ease.mjs","../node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","../node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","../node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","../node_modules/framer-motion/dist/es/easing/circ.mjs","../node_modules/framer-motion/dist/es/easing/back.mjs","../node_modules/framer-motion/dist/es/easing/utils/map.mjs","../node_modules/framer-motion/dist/es/easing/anticipate.mjs","../node_modules/framer-motion/dist/es/value/types/color/utils.mjs","../node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","../node_modules/framer-motion/dist/es/value/types/color/hex.mjs","../node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","../node_modules/framer-motion/dist/es/value/types/color/index.mjs","../node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","../node_modules/framer-motion/dist/es/utils/mix-color.mjs","../node_modules/framer-motion/dist/es/value/types/complex/index.mjs","../node_modules/framer-motion/dist/es/utils/mix-complex.mjs","../node_modules/framer-motion/dist/es/utils/interpolate.mjs","../node_modules/framer-motion/dist/es/utils/offsets/default.mjs","../node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","../node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","../node_modules/framer-motion/dist/es/utils/offsets/time.mjs","../node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","../node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","../node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","../node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","../node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","../node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs","../node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","../node_modules/framer-motion/dist/es/animation/animators/js/index.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs","../node_modules/framer-motion/dist/es/utils/memo.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","../node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","../node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","../node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","../node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","../node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","../node_modules/framer-motion/dist/es/animation/animators/instant.mjs","../node_modules/framer-motion/dist/es/utils/get-context-window.mjs","../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../node_modules/framer-motion/dist/es/projection/node/state.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../node_modules/framer-motion/dist/es/utils/array.mjs","../node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../node_modules/framer-motion/dist/es/value/index.mjs","../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../node_modules/framer-motion/dist/es/debug/record.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","../node_modules/framer-motion/dist/es/utils/delay.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../node_modules/framer-motion/dist/es/gestures/hover.mjs","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","../node_modules/framer-motion/dist/es/gestures/press.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../node_modules/framer-motion/dist/es/gestures/focus.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../node_modules/framer-motion/dist/es/render/store.mjs","../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../node_modules/framer-motion/dist/es/render/dom/features-max.mjs","../node_modules/framer-motion/dist/es/render/dom/features-animation.mjs"],"sourcesContent":["class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nexport { mix };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return isBezierDefinition(easing)\n        ? cubicBezierAsString(easing)\n        : Array.isArray(easing)\n            ? easing.map(mapEasingToNativeEasing)\n            : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mix } from './mix.mjs';\nimport { invariant } from './errors.mjs';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\nimport { hex } from '../value/types/color/hex.mjs';\nimport { rgba } from '../value/types/color/rgba.mjs';\nimport { hsla } from '../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","import { cssVariableRegex } from '../../../render/dom/utils/is-css-variable.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { colorRegex, floatRegex, isString, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst cssVarTokeniser = {\n    regex: cssVariableRegex,\n    countKey: \"Vars\",\n    token: \"${v}\",\n    parse: noop,\n};\nconst colorTokeniser = {\n    regex: colorRegex,\n    countKey: \"Colors\",\n    token: \"${c}\",\n    parse: color.parse,\n};\nconst numberTokeniser = {\n    regex: floatRegex,\n    countKey: \"Numbers\",\n    token: \"${n}\",\n    parse: number.parse,\n};\nfunction tokenise(info, { regex, countKey, token, parse }) {\n    const matches = info.tokenised.match(regex);\n    if (!matches)\n        return;\n    info[\"num\" + countKey] = matches.length;\n    info.tokenised = info.tokenised.replace(regex, token);\n    info.values.push(...matches.map(parse));\n}\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const info = {\n        value: originalValue,\n        tokenised: originalValue,\n        values: [],\n        numVars: 0,\n        numColors: 0,\n        numNumbers: 0,\n    };\n    if (info.value.includes(\"var(--\"))\n        tokenise(info, cssVarTokeniser);\n    tokenise(info, colorTokeniser);\n    tokenise(info, numberTokeniser);\n    return info;\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, numVars, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            if (i < numVars) {\n                output = output.replace(cssVarTokeniser.token, v[i]);\n            }\n            else if (i < numVars + numColors) {\n                output = output.replace(colorTokeniser.token, color.transform(v[i]));\n            }\n            else {\n                output = output.replace(numberTokeniser.token, sanitize(v[i]));\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n","import { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { pipe } from './pipe.mjs';\nimport { warning } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../value/types/complex/index.mjs';\n\nconst mixImmediate = (origin, target) => (p) => `${p > 0 ? target : origin}`;\nfunction getMixer(origin, target) {\n    if (typeof origin === \"number\") {\n        return (v) => mix(origin, target, v);\n    }\n    else if (color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return origin.startsWith(\"var(\")\n            ? mixImmediate(origin, target)\n            : mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = { ...origin, ...target };\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.numVars === targetStats.numVars &&\n        originStats.numColors === targetStats.numColors &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.values, targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\nexport { mixArray, mixComplex, mixObject };\n","import { invariant } from './errors.mjs';\nimport { color } from '../value/types/color/index.mjs';\nimport { clamp } from './clamp.mjs';\nimport { mix } from './mix.mjs';\nimport { mixColor } from './mix-color.mjs';\nimport { mixComplex, mixArray, mixObject } from './mix-complex.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof v === \"string\") {\n        return color.test(v) ? mixColor : mixComplex;\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === \"object\") {\n        return mixObject;\n    }\n    return mixNumber;\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","import { mix } from '../mix.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mix(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => frameData.isProcessing ? frameData.timestamp : performance.now(),\n    };\n};\n\nexport { frameloopDriver };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (speed < 0)\n            startTime = Math.min(timestamp - totalDuration / speed, startTime);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            currentTime = Math.round(timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" || (playState === \"running\" && done));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        resolveFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        if (playState === \"finished\") {\n            updateFinishedPromise();\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n","import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frameData, frame, cancelFrame } from '../../../frameloop/frame.mjs';\n\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supportsWaapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    /**\n     * WAAPI animations don't resolve startTime synchronously. But a blocked\n     * thread could delay the startTime resolution by a noticeable amount.\n     * For synching handoff animations with the new Motion animation we want\n     * to ensure startTime is synchronously set.\n     */\n    if (options.syncStart) {\n        animation.startTime = frameData.isProcessing\n            ? frameData.timestamp\n            : document.timeline\n                ? document.timeline.currentTime\n                : performance.now();\n    }\n    const cancelAnimation = () => animation.cancel();\n    const safeCancel = () => {\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        attachTimeline(timeline) {\n            animation.timeline = timeline;\n            animation.onfinish = null;\n            return noop;\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n    return controls;\n}\n\nexport { createAcceleratedAnimation };\n","function memo(callback) {\n    let result;\n    return () => {\n        if (result === undefined)\n            result = callback();\n        return result;\n    };\n}\n\nexport { memo };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n}\n\nexport { isNone };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, isTransitionDefined };\n","import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\n\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ease: \"easeOut\",\n            ...valueTransition,\n            delay: -elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(instantAnimationState.current\n                ? { ...options, delay: 0 }\n                : options);\n        }\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (value.owner &&\n            value.owner.current instanceof HTMLElement &&\n            !value.owner.getProps().onUpdate) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animateValue(options);\n    };\n};\n\nexport { animateMotionValue };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isNone } from './is-none.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let keyframes;\n    if (Array.isArray(target)) {\n        keyframes = [...target];\n    }\n    else {\n        keyframes = [null, target];\n    }\n    const defaultOrigin = transition.from !== undefined ? transition.from : value.get();\n    let animatableTemplateValue = undefined;\n    const noneKeyframeIndexes = [];\n    for (let i = 0; i < keyframes.length; i++) {\n        /**\n         * Fill null/wildcard keyframes\n         */\n        if (keyframes[i] === null) {\n            keyframes[i] = i === 0 ? defaultOrigin : keyframes[i - 1];\n        }\n        if (isNone(keyframes[i])) {\n            noneKeyframeIndexes.push(i);\n        }\n        // TODO: Clean this conditional, it works for now\n        if (typeof keyframes[i] === \"string\" &&\n            keyframes[i] !== \"none\" &&\n            keyframes[i] !== \"0\") {\n            animatableTemplateValue = keyframes[i];\n        }\n    }\n    if (isTargetAnimatable &&\n        noneKeyframeIndexes.length &&\n        animatableTemplateValue) {\n        for (let i = 0; i < noneKeyframeIndexes.length; i++) {\n            const index = noneKeyframeIndexes[i];\n            keyframes[index] = getAnimatableNone(valueName, animatableTemplateValue);\n        }\n    }\n    return keyframes;\n}\n\nexport { getKeyframes };\n","import { animateValue } from './js/index.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nfunction createInstantAnimation({ keyframes, delay, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n        /**\n         * TODO: As this API grows it could make sense to always return\n         * animateValue. This will be a bigger project as animateValue\n         * is frame-locked whereas this function resolves instantly.\n         * This is a behavioural change and also has ramifications regarding\n         * assumptions within tests.\n         */\n        return {\n            time: 0,\n            speed: 1,\n            duration: 0,\n            play: (noop),\n            pause: (noop),\n            stop: (noop),\n            then: (resolve) => {\n                resolve();\n                return Promise.resolve();\n            },\n            cancel: (noop),\n            complete: (noop),\n        };\n    };\n    return delay\n        ? animateValue({\n            keyframes: [0, 1],\n            duration: 0,\n            delay,\n            onComplete: setValue,\n        })\n        : setValue();\n}\n\nexport { createInstantAnimation };\n","// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { frame, frameData } from '../frameloop/frame.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"10.16.15\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = frameData;\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                frame.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.events.velocityChange) {\n                this.events.velocityChange.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => frame.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                if (this.events.velocityChange) {\n                    this.events.velocityChange.notify(this.getVelocity());\n                }\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n        this.owner = options.owner;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = prev;\n        this.timeDelta = delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = performance.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        if (transitionOrigin !== undefined) {\n            origin[key] = transitionOrigin;\n        }\n        else {\n            const value = visualElement.getValue(key);\n            if (value) {\n                origin[key] = value.get();\n            }\n        }\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n    const current = value.get();\n    if (Array.isArray(target)) {\n        for (let i = 0; i < target.length; i++) {\n            if (target[i] !== current)\n                return true;\n        }\n    }\n    else {\n        return current !== target;\n    }\n}\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let canSkipHandoff = true;\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed) {\n                    canSkipHandoff = false;\n                    valueTransition.elapsed = elapsed;\n                    valueTransition.syncStart = true;\n                }\n            }\n        }\n        let canSkip = canSkipHandoff && !hasKeyframesChanged(value, valueTarget);\n        if (valueTransition.type === \"spring\" &&\n            (value.getVelocity() || valueTransition.velocity)) {\n            canSkip = false;\n        }\n        /**\n         * Temporarily disable skipping animations if there's an animation in\n         * progress. Better would be to track the current target of a value\n         * and compare that against valueTarget.\n         */\n        if (value.animation) {\n            canSkip = false;\n        }\n        if (canSkip)\n            continue;\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        const animation = value.animation;\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            transitionEnd && setTarget(visualElement, transitionEnd);\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\n\nexport { animateVisualElement };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete, custom } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = \"pointer\" + (isActive ? \"enter\" : \"leave\");\n    const callbackName = \"onHover\" + (isActive ? \"Start\" : \"End\");\n    const handleEvent = (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        if (props[callbackName]) {\n            frame.update(() => props[callbackName](event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            this.removeEndListeners();\n            if (this.isPressing)\n                return;\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel } = this.node.getProps();\n                frame.update(() => {\n                    /**\n                     * We only count this as a tap gesture if the event.target is the same\n                     * as, or a child of, this component's element\n                     */\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                        ? onTapCancel && onTapCancel(endEvent, endInfo)\n                        : onTap && onTap(endEvent, endInfo);\n                });\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, { passive: !(props.onTap || props[\"onPointerUp\"]) });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props[\"onPointerCancel\"]) });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.update(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.update(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.update(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(this.node.current, \"pointerdown\", this.startPointerPress, { passive: !(props.onTapStart || props[\"onPointerStart\"]) });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    else if (isCSSVariableToken(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariableToken(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariableToken(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        if (!transitionEnd)\n            transitionEnd = {};\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { parseCSSVariable, resolveCSSVariables };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from '../../../utils/errors.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                /**\n                 * Don't allow wildcard keyframes to be used to detect\n                 * a difference in value types.\n                 */\n                if (to[i] === null)\n                    break;\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { positionalValues, unitConversion };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            this.features[key].unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                frame.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        var _a;\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"10.16.15\", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.16.15 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style ? props.style[key] : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { drag } from '../../motion/features/drag.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\nimport { domAnimation } from './features-animation.mjs';\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout,\n};\n\nexport { domMax };\n","import { animations } from '../../motion/features/animations.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\nexport { domAnimation };\n"],"names":["Feature","constructor","node","this","isMounted","update","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","arguments","length","undefined","point","x","y","addPointerInfo","handler","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","addDomEvent","target","eventName","options","passive","addEventListener","removeEventListener","addPointerEvent","combineFunctions","a","b","v","pipe","_len","transformers","Array","_key","reduce","distance","Math","abs","PanSession","handlers","transformPagePoint","contextWindow","startEvent","lastMoveEvent","lastMoveEventInfo","window","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","sqrt","distance2D","offset","timestamp","frameData","push","onStart","onMove","handlePointerMove","transformPoint","frame","handlePointerUp","end","onEnd","onSessionEnd","panInfo","type","initialInfo","onSessionStart","removeListeners","updateHandlers","cancelFrame","subtractPoint","_ref","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","createLock","name","lock","openLock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal","openVertical","isDragActive","openGestureLock","progress","from","to","value","toFromDifference","mix","calcLength","axis","max","min","isNear","maxDistance","calcAxisDelta","source","origin","originPoint","scale","isNaN","translate","calcBoxDelta","originX","originY","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createDelta","createBox","eachAxis","callback","convertBoundingBoxToBox","top","left","right","bottom","isIdentityScale","hasScale","scaleX","scaleY","hasTransform","values","has2DTranslate","z","rotate","rotateX","rotateY","is2DTranslate","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","Number","isInteger","translateAxis","transformAxis","transforms","_ref2","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","transform","measureViewportBox","instance","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","instantAnimationState","isBezierDefinition","easing","isArray","isWaapiSupportedEasing","Boolean","supportedWaapiEasing","every","cubicBezierAsString","c","d","concat","linear","ease","easeIn","easeOut","easeInOut","circIn","circOut","backIn","backOut","mapEasingToNativeEasing","map","calcBezier","t","a1","a2","subdivisionPrecision","subdivisionMaxIterations","cubicBezier","mX1","mY1","mX2","mY2","noop","getTForX","aX","lowerBound","upperBound","currentX","currentT","binarySubdivide","isEasingArray","mirrorEasing","p","reverseEasing","sin","acos","circInOut","backInOut","easingLookup","anticipate","pow","easingDefinitionToFunction","definition","invariant","x1","y1","x2","y2","isColorString","testProp","isString","singleColorRegex","test","startsWith","Object","prototype","hasOwnProperty","call","splitColor","aName","bName","cName","alpha","match","floatRegex","parseFloat","rgbUnit","number","round","clamp","clampRgbUnit","rgba","parse","red","green","blue","alpha$1","sanitize","hex","r","g","substring","parseInt","hsla","hue","saturation","lightness","percent","color","hueToRgb","q","mixLinearColor","fromExpo","colorTypes","asRGBA","find","model","hslaToRgba","mixColor","fromRGBA","toRGBA","blended","cssVarTokeniser","regex","cssVariableRegex","countKey","token","colorTokeniser","colorRegex","numberTokeniser","tokenise","matches","tokenised","replace","analyseComplexValue","originalValue","toString","numVars","numColors","numNumbers","includes","parseComplexValue","createTransformer","numValues","output","convertNumbersToZero","complex","_a","_b","getAnimatableNone","parsed","transformer","mixImmediate","getMixer","mixComplex","mixArray","blendValue","fromThis","mixObject","template","originStats","targetStats","warning","mixNumber","createMixers","customMixer","mixers","mixerFactory","numMixers","mixer","easingFunction","interpolate","input","isClamp","inputLength","reverse","interpolator","progressInRange","defaultOffset","arr","remaining","offsetProgress","fillOffset","keyframes","duration","keyframeValues","times","easingFunctions","state","done","absoluteTimes","o","convertOffsetToTimes","mapTimeToKeyframe","splice","calculatedDuration","next","velocityPerSecond","frameDuration","velocitySampleDuration","calcGeneratorVelocity","resolveValue","current","prevT","safeMin","minDuration","maxDuration","minDamping","maxDamping","findSpring","envelope","derivative","bounce","mass","dampingRatio","undampedFreq","exponentialDecay","calcAngularFreq","exp","e","f","initialGuess","result","rootIterations","approximateRoot","stiffness","damping","durationKeys","physicsKeys","isSpringType","keys","some","spring","restDelta","restSpeed","isResolvedFromDuration","springOptions","derived","getSpringOptions","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","resolveSpring","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","latest","timeReachedBoundary","spring$1","checkCatchBoundary","hasUpdatedFrame","frameloopDriver","passTimestamp","start","stop","now","isProcessing","performance","maxGeneratorDuration","calcGeneratorDuration","generator","types","decay","tween","animateValue","resolveFinishedPromise","currentFinishedPromise","autoplay","delay","driver","keyframes$1","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","speed","hasStopped","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","mirroredGenerator","playState","holdTime","startTime","cancelTime","resolvedDuration","totalDuration","currentTime","tick","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","currentIteration","floor","iterationProgress","iterationIsOdd","isAnimationFinished","finish","stopAnimationDriver","cancel","play","controls","then","reject","newTime","newSpeed","pause","complete","sample","supportsWaapi","memo","Element","acceleratedValues","Set","createAcceleratedAnimation","valueName","has","requiresPregeneratedKeyframes","sampleAnimation","pregeneratedKeyframes","animation","element","keyframeOptions","animate","fill","iterations","direction","animateStyle","owner","syncStart","document","timeline","cancelAnimation","safeCancel","onfinish","set","getFinalKeyframe","attachTimeline","playbackRate","setWithVelocity","underDampedSpring","keyframesTransition","getDefaultTransition","valueKey","transformProps","isAnimatable","maxDefaults","applyDefaultFilter","slice","split","unit","defaultValue","functionRegex","filter","functions","join","defaultValueTypes","numberValueTypes","backgroundColor","outlineColor","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","isZeroValueString","isNone","getValueTransition","transition","animateMotionValue","valueTransition","isTargetAnimatable","defaultOrigin","get","animatableTemplateValue","noneKeyframeIndexes","getKeyframes","originKeyframe","targetKeyframe","isOriginAnimatable","when","_delay","delayChildren","staggerChildren","staggerDirection","isTransitionDefined","setValue","createInstantAnimation","HTMLElement","getProps","acceleratedAnimation","getContextWindow","ownerDocument","defaultView","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","presenceContext","isPresent","panSession","stopAnimation","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","animationState","setActive","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","getCurrentDirection","updateAxis","render","getTransformPagePoint","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","measure","prevConstraints","isRefObject","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","rootProjectionNode","viewportBox","scroll","measurePageBox","root","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","all","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","sourceLength","targetLength","calcOrigin","transformTemplate","style","updateScroll","updateLayout","addListeners","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","motionValue","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","px","correctBoxShadow","treeScale","projectionDelta","original","shadow","xScale","yScale","averageScale","MeasureLayoutWithContext","React__default","componentDidMount","layoutGroup","switchLayoutGroup","layoutId","addScaleCorrector","defaultScaleCorrectors","group","add","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","prevProps","layoutDependency","willUpdate","promote","relegate","postRender","stack","getStack","members","componentDidUpdate","queueMicrotask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","MeasureLayout","context","useContext","PresenceContext","id","useId","useEffect","usePresence","LayoutGroupContext","SwitchLayoutGroupContext","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","addUniqueItem","item","indexOf","removeItem","index","SubscriptionManager","subscriptions","notify","numSubscriptions","getSize","clear","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","aspectRatio","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","forEach","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","children","isDirty","child","sort","collectMotionValues","MotionValue","init","_this","version","lastUpdated","canTrackVelocity","events","updateAndNotify","prev","scheduleVelocityCheck","change","velocityChange","renderRequest","velocityCheck","hasAnimated","onChange","subscription","on","unsubscribe","read","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","jump","getPrevious","animationStart","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","transformAxes","hiddenVisibility","visibility","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","Map","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","data","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","notifyListeners","subscriptionManager","args","hasListeners","mount","SVGElement","tagName","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","shouldReduceMotion","unmount","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","steps","process","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","treePath","isSharedTransition","treeLength","display","applyTreeDeltas","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","motionValue$1","isMotionValue","animateSingleValue","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","rotateZ","resetValues","setStaticValue","getProjectionStyles","styleProp","styles","pointerEvents","resolveMotionValue","emptyStyles","valuesToRender","transformOrigin","scaleCorrectors","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","string","navigator","userAgent","toLowerCase","roundPoint","DocumentProjectionNode","ref","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","getComputedStyle","position","pan","super","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","dragControls","subscribe","ProjectionNode","shallowCompare","prevLength","resolveVariant","custom","resolveVariantFromProps","getCurrent","isWillChangeMotionValue","isNumericalString","testValueType","dimensionValueTypes","degrees","vw","vh","findDimensionValueType","valueTypes","setMotionValue","hasValue","addValue","setTarget","resolved","transitionEnd","makeTargetAnimatable","resolveFinalValueInKeyframes","getOriginFromTransition","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","hasKeyframesChanged","animateTarget","transitionOverride","willChange","animations","animationTypeState","getState","valueTarget","canSkipHandoff","HandoffAppearAnimations","appearId","optimizedAppearDataAttribute","animateVariant","variant","getAnimation","getChildAnimations","variantChildren","size","forwardDelay","maxStaggerDuration","generateStaggerDuration","sortByTreeOrder","animateChildren","first","last","sortNodePosition","reversePriorityOrder","variantPriorityOrder","numAnimationTypes","animateList","resolvedDefinition","animateVisualElement","createAnimationState","createTypeState","whileInView","whileHover","whileTap","whileDrag","whileFocus","exit","isInitialRender","buildResolvedTypeValues","acc","animateChanges","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","prevProp","isAnimationControls","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","resolvedValues","prevResolvedValues","allKeys","markToAnimate","isKeyframesTarget","blockInitialAnimation","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setAnimateFunction","makeAnimator","updateAnimationControlsSubscription","prevAnimate","prevIsPresent","prevPresenceContext","exitAnimation","addHoverEvent","callbackName","handleEvent","isNodeOrChild","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","gestureAnimations","inView","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","isIntersecting","onViewportEnter","onViewportLeave","hasOptionsChanged","prevViewport","hasViewportOptionChanged","tap","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endPointerPress","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","handleBlur","onTapStart","removePointerListener","removeFocusListener","focus","onFocus","isFocusVisible","onBlur","hover","splitCSSVariableRegex","maxDepth","getVariableValue","fallback","exec","parseCSSVariable","getPropertyValue","trimmed","trim","isCSSVariableToken","positionalKeys","isPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformPropOrder","positionalValues","width","_ref3","paddingLeft","paddingRight","height","_ref4","_ref5","paddingTop","paddingBottom","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","translateX","translateY","checkAndConvertChangedValueTypes","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","fromType","toType","numKeyframes","fromIndex","removedTransforms","removeNonTranslationalTransform","scrollY","pageYOffset","convertedTarget","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","targetBbox","_ref12","isBrowser","scrollTo","unitConversion","hasPositionalKey","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","visualElementStore","featureNames","featureDefinitions","numFeatures","propEventHandlers","numVariantProps","variantProps","VisualElement","reducedMotionConfig","visualState","isVariantNode","isControllingVariants","features","valueSubscriptions","prevMotionValues","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","renderState","baseTarget","initialValues","initialMotionValues","scrapeMotionValuesFromProps","_props","_prevProps","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","initPrefersReducedMotion","valueIsTransform","removeOnChange","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","renderedProps","isEnabled","FeatureConstructor","MeasureLayoutComponent","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","canMutate","makeTargetAnimatableFromInstance","listener","nextValue","prevValue","existingValue","removeValue","updateMotionValuesFromProps","handleChildMotionValue","getVariant","variants","getClosestVariantNode","closestVariantNode","removeValueFromRenderState","readValue","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","valueFromInitial","DOMVisualElement","compareDocumentPosition","vars","transformValues","transitionOrigin","getOrigin","newValueKeys","numNewValues","targetValue","checkTargetForNewValues","HTMLVisualElement","defaultType","default","computedStyle","isCSSVariableName","buildHTMLStyles","childSubscription","textContent","renderHTML","SVGVisualElement","isSVGTag","camelCaseAttributes","camelToDash","getAttribute","buildSVGAttrs","renderSVG","domMax","renderer","createDomVisualElement","Component","isSVGComponent","enableHardwareAcceleration"],"sourceRoot":""}